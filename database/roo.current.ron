(
    objects: {
        "c375d3a0-925c-4713-8d80-88bfa6b72fae": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("add96e38-85b2-410a-8ef4-163f5be6e3c1")),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("c375d3a0-925c-4713-8d80-88bfa6b72fae"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "96c8c567-fa6c-451a-8261-df265f8e568c": (
            properties: {
                "parent": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("96c8c567-fa6c-451a-8261-df265f8e568c"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "c364f67f-c2db-4e59-8caa-ac7ae2a779ac": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("c364f67f-c2db-4e59-8caa-ac7ae2a779ac"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "b839ec07-3c13-487a-b59e-468a486bcb89": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "key": (
                    value: Integer(0),
                ),
                "uuid": (
                    value: Uuid("b839ec07-3c13-487a-b59e-468a486bcb89"),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "4d298345-cbe6-4a90-8c98-d8d9cf3d3bab": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("4d298345-cbe6-4a90-8c98-d8d9cf3d3bab"),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [],
        ),
        "7baace17-a42d-45fb-aba1-e40dfe1282f1": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("7baace17-a42d-45fb-aba1-e40dfe1282f1"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [],
        ),
        "b63aa2b2-2793-4ccd-bff8-dba42d7f98c2": (
            properties: {
                "key": (
                    value: Integer(0),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("b63aa2b2-2793-4ccd-bff8-dba42d7f98c2"),
                ),
                "name": (
                    value: String(""),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "7e09d2a6-1259-4366-947c-b29e17267da8": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "uuid": (
                    value: Uuid("7e09d2a6-1259-4366-947c-b29e17267da8"),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "385b078b-235b-4d69-ad8a-16008672fd10": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("add96e38-85b2-410a-8ef4-163f5be6e3c1")),
                ),
                "name": (
                    value: String("generic player"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
                "uuid": (
                    value: Uuid("385b078b-235b-4d69-ad8a-16008672fd10"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "my_match_object",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- :my_match_object(string [,location])",
                        "        return S.string_utils:match_object(unpack(",
                        "            pl.List(args):append(this.location):slice(1, 2):append(this)",
                        "        ))",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "@edit",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "-- Calls the verb editor on verbs, the note editor on properties, and on anything else assumes it\'s an object for which you want to edit the .description.",
                        "",
                        "-- Placeholder until the rest of the machinery is in place",
                        "    S.webclient:invoke(argstr, verb)",
                        "-- EOF placeholder",
                        "",
                        "--local len = player.linelen",
                        "--if not args then",
                        "--  (player in $note_editor.active ? $note_editor | $verb_editor):invoke(dobjstr, verb);",
                        "--elseif ($code_utils:parse_verbref(args[1]))",
                        "--  if (player.programmer)",
                        "--    #480:invoke(argstr, verb);",
                        "--    player:tell(\"invoke done\");",
                        "--  else",
                        "--    player:notify(\"You need to be a programmer to do this.\");",
                        "--    player:notify(\"If you want to become a programmer, talk to a wizard.\");",
                        "--    return;",
                        "--  endif",
                        "--elseif ($list_editor:is_valid(dobjstr))",
                        "--  $list_editor:invoke(dobjstr, verb);",
                        "--else",
                        "--  $note_editor:invoke(dobjstr, verb);",
                        "--endif",
                        "--if len then",
                        "--    player.linelen = len",
                        "--end",
                        "--\"player.linelen = len;\"",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "edit_option",
                        ],
                    ),
                    args: NoArgs,
                    code: [],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "@program",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local vref = List(args)",
                        "",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {\"@program object:verb argspec\"})",
                        "  return",
                        "end",
                        "",
                        "local argspec = vref:slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "",
                        "  player:tell(\"Now programming %s:%d\" % {object.uuid, vnum})",
                        "",
                        "  local done = false",
                        "  local lines = List()",
                        "  while not done do",
                        "      local line = read()",
                        "      if line == \'.\' then",
                        "          done = true",
                        "      else",
                        "          lines:append(line)",
                        "      end",
                        "  end",
                        "",
                        "  local result = set_verb_code(object, vnum, lines)",
                        "  if result:is_ok() then",
                        "    player:tell(\"Program saved.\")",
                        "  else",
                        "    player:tell(toliteral(result:err()))",
                        "  end",
                        "end",
                        "    ",
                    ],
                ),
            ],
        ),
        "d21d6647-9ec4-4ffe-ab32-f7df83e3155c": (
            properties: {
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("d21d6647-9ec4-4ffe-ab32-f7df83e3155c"),
                ),
                "key": (
                    value: Integer(0),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "owner": (
                    value: UuidOpt(Some("c364f67f-c2db-4e59-8caa-ac7ae2a779ac")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "e2a775d7-58b9-4c79-9fc9-682516813501": (
            properties: {
                "parent": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("e2a775d7-58b9-4c79-9fc9-682516813501"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [],
        ),
        "b5d5f0a5-0f89-4325-b752-4594a1d95f07": (
            properties: {
                "owner": (
                    value: UuidOpt(Some("6e02be8d-7f47-45b9-8efe-8d289e19619f")),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "key": (
                    value: Integer(0),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("b5d5f0a5-0f89-4325-b752-4594a1d95f07"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "8529751f-2adf-448e-bffd-87ea58a68d4a": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "uuid": (
                    value: Uuid("8529751f-2adf-448e-bffd-87ea58a68d4a"),
                ),
                "owner": (
                    value: UuidOpt(Some("9de6dec1-b987-42dd-82df-24968e88665c")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "key": (
                    value: Integer(0),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "2081ad5c-569f-40c3-8ccd-72d2e3e0a22e": (
            properties: {
                "uuid": (
                    value: Uuid("2081ad5c-569f-40c3-8ccd-72d2e3e0a22e"),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "99b98285-a342-436a-9e7e-a403a13eeb82": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("99b98285-a342-436a-9e7e-a403a13eeb82"),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [],
        ),
        "46a57754-dda3-43f4-9ec4-40225f3a2a4a": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(Some("add96e38-85b2-410a-8ef4-163f5be6e3c1")),
                ),
                "uuid": (
                    value: Uuid("46a57754-dda3-43f4-9ec4-40225f3a2a4a"),
                ),
                "name": (
                    value: String(""),
                ),
                "owner": (
                    value: UuidOpt(Some("3bc7b8f7-c271-4bda-9cf4-82efb5b2e707")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "10a46bf6-18bb-4005-bb5f-edc5d66f60b6": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("10a46bf6-18bb-4005-bb5f-edc5d66f60b6"),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "df51bf67-85cb-4710-be07-9c139da6d77f": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("df51bf67-85cb-4710-be07-9c139da6d77f"),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "key": (
                    value: Integer(0),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "owner": (
                    value: UuidOpt(Some("d86c458f-f284-45ed-bbdf-0c480c9fae76")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "abb8c86b-d974-4b27-a3eb-a52005e156e8": (
            properties: {
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "key": (
                    value: Integer(0),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("abb8c86b-d974-4b27-a3eb-a52005e156e8"),
                ),
                "name": (
                    value: String(""),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "e8e69bf4-6d3f-421c-8148-c9455fdae541": (
            properties: {
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "uuid": (
                    value: Uuid("e8e69bf4-6d3f-421c-8148-c9455fdae541"),
                ),
                "key": (
                    value: Integer(0),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "6ed07322-e70a-467d-abcf-033c3a15f34e": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("6ed07322-e70a-467d-abcf-033c3a15f34e"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [],
        ),
        "9b75fa82-4ba7-435d-a76b-b3b273964cd4": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("9b75fa82-4ba7-435d-a76b-b3b273964cd4"),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "key": (
                    value: Integer(0),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "dc72d8d9-3ba9-498d-a723-887886e222c4": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("dc72d8d9-3ba9-498d-a723-887886e222c4"),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "25e65e40-13fd-42de-8663-b7295c7fc227": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("25e65e40-13fd-42de-8663-b7295c7fc227"),
                ),
            },
            verbs: [],
        ),
        "5577fa9f-1227-4cec-9474-ab6c7693ed19": (
            properties: {
                "parent": (
                    value: UuidOpt(None),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("5577fa9f-1227-4cec-9474-ab6c7693ed19"),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "f68be746-bfcf-4708-8514-a3e1dbcbd311": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("f68be746-bfcf-4708-8514-a3e1dbcbd311"),
                ),
            },
            verbs: [],
        ),
        "e234f724-4aa0-4f6d-85ea-0719d3e3ab11": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("e234f724-4aa0-4f6d-85ea-0719d3e3ab11"),
                ),
                "key": (
                    value: Integer(0),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "owner": (
                    value: UuidOpt(Some("7901832f-942a-4f1e-9afa-891e06c11c51")),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "a7d0d68f-3647-47e2-8b3e-a324c943bae4": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("a7d0d68f-3647-47e2-8b3e-a324c943bae4"),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "object_match_failed",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- Usage: object_match_failed(object, string)",
                        "        -- Prints a message if string does not match object.  Generally used after object is derived from a :match_object(string).",
                        "        local match_result, string = table.unpack(args)",
                        "        assert_class_of(1, match_result, ObjectProxy)",
                        "        assert_string(2, string)",
                        "",
                        "        -- TODO: tell = $perm_utils:controls(caller_perms(), player) ? \"notify\" | \"tell\";",
                        "        local tell = bind1(player.tell, player)",
                        "        if is_uuid(string) and S.code_utils:toobj(string) ~= E_TYPE then",
                        "          -- ...avoid the `I don\'t know which `#-2\' you mean\' message...",
                        "          if not valid(match_result) then",
                        "            tell(\"%s does not exist.\" % {string})",
                        "          end",
                        "          return not valid(match_result)",
                        "        elseif match_result == S.nothing then",
                        "          tell(\"You must give the name of some object.\")",
                        "        elseif match_result == S.failed_match then",
                        "          tell(\'I see no \"%s\" here.\' % {string})",
                        "        elseif match_result == S.ambiguous_match then",
                        "          tell(\'I don\\\'t know which \"%s\" you mean.\' % {string})",
                        "        elseif not valid(match_result) then",
                        "          tell(\"%s does not exist.\" % {match_result})",
                        "        else",
                        "          return false",
                        "        end",
                        "        return true",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "dump_lines",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- :dump_lines(text) => text `.\'-quoted for :read_lines()",
                        "        --  text is assumed to be a list of strings",
                        "        --  Returns a corresponding list of strings which, when read via :read_lines, ",
                        "        --  produces the original list of strings (essentially, any strings beginning ",
                        "        --  with a period \".\" have the period doubled).",
                        "        --  The list returned includes a final \".\"",
                        "        -- TODO original implementation has some magic I don\'t understand, review that",
                        "        local text = args[1]",
                        "        return pl.List(text):map(function (line)",
                        "            if string.sub(line, 1, 1) == \".\" then",
                        "                return \".\" .. line",
                        "            else",
                        "                return line",
                        "            end",
                        "        end):append(\".\")",
                        "    ",
                    ],
                ),
            ],
        ),
        "3b4a0473-5871-41d5-8577-237efa11d86b": (
            properties: {
                "parent": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("3b4a0473-5871-41d5-8577-237efa11d86b"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [],
        ),
        "bf0e580c-376a-45ac-bbb9-d5b68b213990": (
            properties: {
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "uuid": (
                    value: Uuid("bf0e580c-376a-45ac-bbb9-d5b68b213990"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "key": (
                    value: Integer(0),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "7a4ea2b6-d625-4581-9088-c4a566952a0e": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("7a4ea2b6-d625-4581-9088-c4a566952a0e"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [],
        ),
        "f64dc309-dae4-410a-b55d-75de04636fc0": (
            properties: {
                "uuid": (
                    value: Uuid("f64dc309-dae4-410a-b55d-75de04636fc0"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [],
        ),
        "d86c458f-f284-45ed-bbdf-0c480c9fae76": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("d86c458f-f284-45ed-bbdf-0c480c9fae76"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "ebb71854-3f9e-44ab-9c6e-dd1f37910b87": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "name": (
                    value: String(""),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "uuid": (
                    value: Uuid("ebb71854-3f9e-44ab-9c6e-dd1f37910b87"),
                ),
                "key": (
                    value: Integer(0),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "5a45b2a8-54ce-4958-962e-f7b3d4db7885": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("5879f9aa-5f0d-4c6f-9304-71bef841813c")),
                ),
                "description": (
                    value: String("There is nothing, and you are in it."),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("5a45b2a8-54ce-4958-962e-f7b3d4db7885"),
                ),
                "name": (
                    value: String("The Void"),
                ),
                "contents": (
                    value: Uuids([
                        "f1e85ac7-270f-4897-b67d-db19bc363c55",
                        "f4ef34ba-b3b1-4a03-92ba-217994a1fb06",
                        "3bc7b8f7-c271-4bda-9cf4-82efb5b2e707",
                    ]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "wiggle",
                        ],
                    ),
                    args: NoArgs,
                    code: [
                        "        this:announce_all(\"%s wiggles\" % {this.name})",
                        "    ",
                    ],
                ),
            ],
        ),
        "c2cfd59d-4e28-49a7-b499-754b73dd2fb4": (
            properties: {
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "name": (
                    value: String(""),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("c2cfd59d-4e28-49a7-b499-754b73dd2fb4"),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "50d2eb07-a02b-4fc8-9f15-a3294447c832": (
            properties: {
                "uuid": (
                    value: Uuid("50d2eb07-a02b-4fc8-9f15-a3294447c832"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "3bc7b8f7-c271-4bda-9cf4-82efb5b2e707": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(Some("5a45b2a8-54ce-4958-962e-f7b3d4db7885")),
                ),
                "name": (
                    value: String("abesto"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("385b078b-235b-4d69-ad8a-16008672fd10")),
                ),
                "uuid": (
                    value: Uuid("3bc7b8f7-c271-4bda-9cf4-82efb5b2e707"),
                ),
                "owner": (
                    value: Uuid("3bc7b8f7-c271-4bda-9cf4-82efb5b2e707"),
                ),
            },
            verbs: [],
        ),
        "0a1cd618-04fc-4fbe-931e-bcf457a7e259": (
            properties: {
                "uuid": (
                    value: Uuid("0a1cd618-04fc-4fbe-931e-bcf457a7e259"),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "d2b86633-5506-46b8-95fd-56eef092bb73": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("d2b86633-5506-46b8-95fd-56eef092bb73"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "cdaf9ec6-a840-4b72-a23c-ced08ec90c0a": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("cdaf9ec6-a840-4b72-a23c-ced08ec90c0a"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [],
        ),
        "9806adf6-7393-4f47-a532-7eca74d5f6c1": (
            properties: {
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "uuid": (
                    value: Uuid("9806adf6-7393-4f47-a532-7eca74d5f6c1"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "owner": (
                    value: UuidOpt(Some("7a4ea2b6-d625-4581-9088-c4a566952a0e")),
                ),
                "key": (
                    value: Integer(0),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "14e8f2b9-b178-43cc-a4f9-61becf0d002a": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("14e8f2b9-b178-43cc-a4f9-61becf0d002a"),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "90f422ff-9dc3-4588-ba8d-e0ba33e995f3": (
            properties: {
                "uuid": (
                    value: Uuid("90f422ff-9dc3-4588-ba8d-e0ba33e995f3"),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "key": (
                    value: Integer(0),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "name": (
                    value: String(""),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "41258865-243a-49b7-9009-7038b862808c": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("41258865-243a-49b7-9009-7038b862808c"),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [],
        ),
        "ad2533ab-2d16-4157-9528-1657da07eb29": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("ad2533ab-2d16-4157-9528-1657da07eb29"),
                ),
            },
            verbs: [],
        ),
        "887d3c3f-0d61-43bd-a409-be0b44f9dd99": (
            properties: {
                "name": (
                    value: String("S.failed_match"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("887d3c3f-0d61-43bd-a409-be0b44f9dd99"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [],
        ),
        "0df9de89-7f50-4191-b6c6-5b207c94b2ff": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "uuid": (
                    value: Uuid("0df9de89-7f50-4191-b6c6-5b207c94b2ff"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("3672a9a9-bec2-4932-b950-423095bf110b")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "16c423f4-62e3-4059-a5a7-da43ffec5128": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("16c423f4-62e3-4059-a5a7-da43ffec5128"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "short_prep",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        return args[1]",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "full_prep",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        return nil",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "toobj",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- TODO this may need some extra logic",
                        "        return toobj(args[1]):unwrap_unsafe()",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "parse_verbref",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "        -- S.code_utils:parse_verbref(string)",
                        "        -- Parses string as a MOO-code verb reference, returning {object, verb-name-string} for a successful parse and false otherwise.  It always returns the right object-string to pass to, for example, this-room:match_object().",
                        "        local s = args[1]",
                        "        local colon = string.find(s, \":\", 1, true)",
                        "        if colon then",
                        "            local object = string.sub(s, 1, colon - 1)",
                        "            local verbname = string.sub(s, colon + 1)",
                        "            if not (object and verbname) then",
                        "                return 0",
                        "            end",
                        "            if string.sub(object, 0, 2) == \"S.\" then",
                        "                local pname = string.sub(object, 3)",
                        "                local p = S[pname]",
                        "                if not is_type(p, ObjectProxy) then",
                        "                    return 0",
                        "                end",
                        "                object = p.uuid",
                        "            end",
                        "            if object == \"S\" then",
                        "                object = S.uuid",
                        "            end",
                        "            return {object, verbname}",
                        "        else",
                        "            return 0",
                        "        end",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "parse_argspec",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "-- :parse_arg_spec(@args)",
                        "--  attempts to parse the given sequence of args into a verb_arg specification",
                        "--  returns {verb_args,remaining_args} if successful.",
                        "--  e.g., :parse_arg_spec(\\\"this\\\",\\\"in\\\",\\\"front\\\",\\\"of\\\",\\\"any\\\",\\\"foo\\\"..)",
                        "--           => {{\\\"this\\\",\\\"in front of\\\",\\\"any\\\"},{\\\"foo\\\"..}}",
                        "--  returns a string error message if parsing fails.",
                        "local nargs = #args",
                        "local args = List(args)",
                        "if nargs < 1 then",
                        "  return {{}, {}}",
                        "end",
                        "",
                        "local ds = args[1]",
                        "if args[1] == \"tnt\" then",
                        "  return {{\"this\", \"none\", \"this\"}, args:slice(2)}",
                        "elseif not List{\"this\", \"any\", \"none\"}:contains(ds) then",
                        "  return \'\"%s\" is not a valid direct object specifier.\' % {ds}",
                        "elseif nargs < 2 or List{\"none\", \"any\"}:contains(args[2]) then",
                        "  local verbargs = args:slice(1, min(3, nargs))",
                        "  local rest = args:slice(4, nargs);",
                        "end",
                        "",
                        "local gp = List(S.code_utils:get_prep(unpack(args:slice(2, nargs))))",
                        "if not gp[1] then",
                        "  return \'\"%s\" is not a valid preposition.\' % {args[2]}",
                        "else",
                        "  local nargs = #gp",
                        "  local verbargs = List{ds}:extend(gp:slice(1, min(2, nargs)))",
                        "  rest = gp:slice(3, nargs)",
                        "end",
                        "",
                        "if #verbargs >= 3 and not List{\"this\", \"any\", \"none\"}:contains(verbargs[3]) then",
                        "  return \'\"%s\" is not a valid indirect object specifier.\' % {verbargs[3]}",
                        "end",
                        "return {verbargs, rest};",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "find_verb_named",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- :find_verb_named(object,name[,n])",
                        "        --  returns the *number* of the first verb on object matching the given name.",
                        "        --  optional argument n, if given, starts the search with verb n,",
                        "        --  causing the first n verbs (1..n-1) to be ignored.",
                        "        --  nil is returned if no verb is found.",
                        "        --  This routine does not find inherited verbs.",
                        "        local object, name, start = unpack(args)",
                        "        assert_object(1, object)",
                        "        assert_string(2, name)",
                        "",
                        "        if start == nil then",
                        "            start = 1",
                        "        end",
                        "        assert_arg(3, start, \"number\")",
                        "",
                        "        return verbs(object):map(function (object_verbs)",
                        "            for i = start, #object_verbs do",
                        "                local verbinfo = verb_info(object, i):unwrap()",
                        "                if this:verbname_match(verbinfo[3], name) then",
                        "                    return i",
                        "                end",
                        "            end",
                        "        end):unwrap_or(nil)",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "verbname_match",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local candidates, name = table.unpack(args)",
                        "        assert_arg(1, candidates, \'table\', nil, is_indexable)",
                        "        assert_string(2, name)",
                        "        return List(candidates):contains(name)",
                        "    ",
                    ],
                ),
            ],
        ),
        "cd22f367-2f14-42c8-bcac-cf3fd6455963": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("cd22f367-2f14-42c8-bcac-cf3fd6455963"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "key": (
                    value: Integer(0),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "0aebb34e-f3a6-4353-ad15-1a970ba002b6": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("0aebb34e-f3a6-4353-ad15-1a970ba002b6"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "48954f33-5574-449a-ad25-25a44615ab2d": (
            properties: {
                "parent": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("48954f33-5574-449a-ad25-25a44615ab2d"),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "7901832f-942a-4f1e-9afa-891e06c11c51": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("7901832f-942a-4f1e-9afa-891e06c11c51"),
                ),
            },
            verbs: [],
        ),
        "2fa9d6a0-fd23-4e15-91a3-ee48b73a36af": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("2fa9d6a0-fd23-4e15-91a3-ee48b73a36af"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [],
        ),
        "d4153e45-3a67-4baa-a793-e77492845ee5": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "key": (
                    value: Integer(0),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("f68be746-bfcf-4708-8514-a3e1dbcbd311")),
                ),
                "uuid": (
                    value: Uuid("d4153e45-3a67-4baa-a793-e77492845ee5"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "c7f2839e-07c9-42f7-afa6-d6b5337885a0": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("add96e38-85b2-410a-8ef4-163f5be6e3c1")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "uuid": (
                    value: Uuid("c7f2839e-07c9-42f7-afa6-d6b5337885a0"),
                ),
            },
            verbs: [],
        ),
        "ca290e6c-cb01-430d-b909-cdab0970e704": (
            properties: {
                "webclient": (
                    value: Uuid("2081ad5c-569f-40c3-8ccd-72d2e3e0a22e"),
                ),
                "command_utils": (
                    value: Uuid("a7d0d68f-3647-47e2-8b3e-a324c943bae4"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "nothing": (
                    value: Uuid("26a3c638-5451-44d2-95a4-8473e3d6d369"),
                ),
                "ambiguous_match": (
                    value: Uuid("6e11b4f1-ccf1-403b-aaa2-c92e27a8c362"),
                ),
                "Root": (
                    value: Uuid("add96e38-85b2-410a-8ef4-163f5be6e3c1"),
                ),
                "uuid": (
                    value: Uuid("ca290e6c-cb01-430d-b909-cdab0970e704"),
                ),
                "starting_room": (
                    value: Uuid("5a45b2a8-54ce-4958-962e-f7b3d4db7885"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "string_utils": (
                    value: Uuid("5c090fb0-824d-46c6-b0de-debb6d7144f4"),
                ),
                "Player": (
                    value: Uuid("385b078b-235b-4d69-ad8a-16008672fd10"),
                ),
                "failed_match": (
                    value: Uuid("887d3c3f-0d61-43bd-a409-be0b44f9dd99"),
                ),
                "name": (
                    value: String(""),
                ),
                "object_utils": (
                    value: Uuid("8929f4ab-d1a0-4971-8e51-01c0b66610d7"),
                ),
                "code_utils": (
                    value: Uuid("16c423f4-62e3-4059-a5a7-da43ffec5128"),
                ),
                "Room": (
                    value: Uuid("5879f9aa-5f0d-4c6f-9304-71bef841813c"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "minimal_core_loaded": (
                    value: Boolean(true),
                ),
                "verb_editor": (
                    value: Uuid("36a8a75d-4f50-4d84-bd38-e7752b5a1446"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: false,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "do_login_command",
                        ],
                    ),
                    args: NoArgs,
                    code: [
                        "        local command = assert_string(1, args[1])",
                        "        if command ~= \"connect\" then",
                        "            player:notify(\'Only the \"connect\" command is currently supported during login\')",
                        "            return nil",
                        "        end",
                        "",
                        "        local name = assert_string(2, args[2])",
                        "",
                        "        for i, candidate in ipairs(players()) do",
                        "            if candidate.name == name then",
                        "                player:notify(\"Welcome back, %s\" % {name})",
                        "                return candidate.uuid",
                        "            end",
                        "        end",
                        "",
                        "        player:notify(\"Welcome, %s\" % {name})",
                        "        local new = create(S.Player):unwrap()",
                        "        new:set_player_flag(true):unwrap()",
                        "        new.owner = new",
                        "        new:move(S.starting_room):unwrap()",
                        "        new.name = name",
                        "",
                        "        return new.uuid",
                        "        ",
                    ],
                ),
            ],
        ),
        "5c090fb0-824d-46c6-b0de-debb6d7144f4": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("5c090fb0-824d-46c6-b0de-debb6d7144f4"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "words",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        return pl.stringx.split(args[1])",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "from_list",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local list, delimiter = table.unpack(args)",
                        "        return table.concat(list, delimiter)",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "match_object",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "        -- :match_object(string,location[,someone])",
                        "        -- Returns the object matching the given string for someone, on the assumption that s/he is in the given location.  `someone\' defaults to player.",
                        "        -- This first tries :literal_object(string), \\\"me\\\"=>someone,\\\"here\\\"=>location, then player:match(string) and finally location:match(string) if location is valid.",
                        "        -- This is the default algorithm for use by room :match_object() and player :my_match_object() verbs.  Player verbs that are calling this directly should probably be calling :my_match_object instead.",
                        "        local string, here, who = table.unpack(args)",
                        "        if who == nil then",
                        "            who = player",
                        "        end",
                        "        pl.utils.assert_string(1, string)",
                        "        assert_class_of(2, here, ObjectProxy)",
                        "        assert_class_of(3, who, ObjectProxy)",
                        "",
                        "        local object = this:literal_object(string)",
                        "        if S.failed_match ~= object then",
                        "            return object",
                        "        elseif string == \"me\" then",
                        "            return who",
                        "        elseif string == \"here\" then",
                        "            return here",
                        "        end",
                        "",
                        "        local pobject = who:match(string)",
                        "        if valid(pobject) and List{pobject.name}:extend(pobject.aliases):contains(string) or not valid(here) then",
                        "            -- ...exact match in player, or room is bogus...",
                        "            return pobject",
                        "        end",
                        "",
                        "        local hobject = here:match(string)",
                        "        if valid(hobject) and List{hobject.name}:extend(hobject.aliases):contains(string) or pobject == S.failed_match then",
                        "            -- ...exact match in room, or match in player failed completely...",
                        "            return hobject",
                        "        else",
                        "            return pobject",
                        "        end",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "match",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "    -- Each obj-list should be a list of objects or a single object, which is treated as if it were a list of that object.  Each prop-name should be string naming a property on every object in the corresponding obj-list.  The value of that property in each case should be either a string or a list of strings.",
                        "    -- The argument string is matched against all of the strings in the property values.",
                        "    -- If it exactly matches exactly one of them, the object containing that property is returned.  If it exactly matches more than one of them, $ambiguous_match is returned.",
                        "    -- If there are no exact matches, then partial matches are considered, ones in which the given string is a prefix of some property string.  Again, if exactly one match is found, the object with that property is returned, and if there is more than one match, $ambiguous_match is returned.",
                        "    -- Finally, if there are no exact or partial matches, then $failed_match is returned.",
                        "    local subject = args[1]",
                        "    assert_class_of(0, this, ObjectProxy)",
                        "    assert_string(1, subject)",
                        "    ",
                        "    if subject == \"\" then",
                        "        return S.nothing",
                        "    end",
                        "    local no_exact_match = nil",
                        "    local no_partial_match = nil",
                        "    for i = 1, #args / 2 do",
                        "        local prop_name = args[2 * i + 1]",
                        "        local olist = args[2 * i]",
                        "        for j, object in ipairs(is_indexable(olist) and olist or {olist}) do",
                        "            if valid(object) then",
                        "                local str_list = object[prop_name]",
                        "                if is_indexable(str_list) and not List:class_of(str_list) then",
                        "                    str_list = List(str_list)",
                        "                elseif not str_list then",
                        "                    str_list = List()",
                        "                end",
                        "                -- TODO handle E_PERM, E_PROPNF => {}",
                        "                if not is_indexable(str_list) then",
                        "                    str_list = List{str_list}",
                        "                end",
                        "                if str_list:contains(subject) then",
                        "                    if no_exact_match == nil then",
                        "                        no_exact_match = object",
                        "                    elseif no_exact_match ~= object then",
                        "                        return S.ambiguous_match",
                        "                    end",
                        "                else",
                        "                    for i, string in ipairs(str_list) do",
                        "                        if string.find(string, subject, 1, true) ~= 1 then",
                        "                        elseif no_partial_match == nil then",
                        "                            no_partial_match = object",
                        "                        elseif no_partial_match ~= object then",
                        "                            no_partial_match = S.ambiguous_match",
                        "                        end",
                        "                    end",
                        "                end",
                        "            end",
                        "        end",
                        "    end",
                        "    return no_exact_match or (no_partial_match or S.failed_match)",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "literal_object",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "    -- Matches args[1] against literal objects: #xxxxx, $variables, *mailing-lists, and username.  Returns the object if successful, $failed_match else.",
                        "    -- TODO this is currently a partial implementation",
                        "    local string = args[1]",
                        "    if #string == 0 then",
                        "      return S.nothing",
                        "    end",
                        "    local object = S.code_utils:toobj(string)",
                        "    if object ~= nil and not is_error(object) then",
                        "      return object;",
                        "    end",
                        "    return S.failed_match;",
                        "    -- elseif (string[1] == \"~\")",
                        "    --   return this:match_player(string[2..$], #0);",
                        "    -- elseif (string[1] == \"*\" && length(string) > 1)",
                        "    --   return $mail_agent:match_recipient(string);",
                        "    -- elseif (string[1] == \"$\")",
                        "    --   string[1..1] = \"\";",
                        "    --   object = #0;",
                        "    --   while (pn = string[1..(dot = index(string, \".\")) ? dot - 1 | $])",
                        "    --     if (!$object_utils:has_property(object, pn) || typeof(object = object.(pn)) != OBJ)",
                        "    --       return $failed_match;",
                        "    --     endif",
                        "    --     string = string[length(pn) + 2..$];",
                        "    --   endwhile",
                        "    --   if (object == #0 || typeof(object) == ERR)",
                        "    --     return $failed_match;",
                        "    --   else",
                        "    --     return object;",
                        "    --   endif",
                        "    -- else",
                        "    --   return $failed_match;",
                        "    -- endif",
                        "    ",
                    ],
                ),
            ],
        ),
        "c3ef2028-c2d6-4556-92dc-36fe20e69309": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("c3ef2028-c2d6-4556-92dc-36fe20e69309"),
                ),
            },
            verbs: [],
        ),
        "add96e38-85b2-410a-8ef4-163f5be6e3c1": (
            properties: {
                "uuid": (
                    value: Uuid("add96e38-85b2-410a-8ef4-163f5be6e3c1"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String("root object"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "match",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "        local c = this.contents",
                        "        return S.string_utils:match(args[1], c, \"name\", c, \"aliases\")",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "get_name",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        return this.name",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "title",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local name = this:get_name()",
                        "        if is_type(name, \"string\") and #name > 0 then",
                        "            return name",
                        "        end",
                        "        return this.uuid",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "tell",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        this:notify(tostr(args))",
                        "    ",
                    ],
                ),
            ],
        ),
        "8a68544d-3203-44e7-bf29-41460588f14e": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("8a68544d-3203-44e7-bf29-41460588f14e"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [],
        ),
        "f1e85ac7-270f-4897-b67d-db19bc363c55": (
            properties: {
                "uuid": (
                    value: Uuid("f1e85ac7-270f-4897-b67d-db19bc363c55"),
                ),
                "name": (
                    value: String("testuser"),
                ),
                "location": (
                    value: UuidOpt(Some("5a45b2a8-54ce-4958-962e-f7b3d4db7885")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: Uuid("f1e85ac7-270f-4897-b67d-db19bc363c55"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("385b078b-235b-4d69-ad8a-16008672fd10")),
                ),
            },
            verbs: [],
        ),
        "eea1e7ae-694c-41ea-8bcf-1bbedee796b6": (
            properties: {
                "parent": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("eea1e7ae-694c-41ea-8bcf-1bbedee796b6"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "696a4aa7-52d2-4aa5-8747-0fff693d5270": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("696a4aa7-52d2-4aa5-8747-0fff693d5270"),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "key": (
                    value: Integer(0),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "owner": (
                    value: UuidOpt(Some("0aebb34e-f3a6-4353-ad15-1a970ba002b6")),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "9e5bdaa8-a32d-48f9-b474-d33152f79af5": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("9e5bdaa8-a32d-48f9-b474-d33152f79af5"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "key": (
                    value: Integer(0),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "8929f4ab-d1a0-4971-8e51-01c0b66610d7": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
                "uuid": (
                    value: Uuid("8929f4ab-d1a0-4971-8e51-01c0b66610d7"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "has_verb",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local object, verb = table.unpack(args)",
                        "        return db:has_verb_with_name(object.uuid, verb)",
                        "    ",
                    ],
                ),
            ],
        ),
        "36a8a75d-4f50-4d84-bd38-e7752b5a1446": (
            properties: {
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("36a8a75d-4f50-4d84-bd38-e7752b5a1446"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "name": (
                    value: String(""),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "get_room",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local object = args[1]",
                        "        return object.location",
                        "    ",
                    ],
                ),
            ],
        ),
        "08d7f3b4-e5e3-47fb-bc57-19ef6b6cb5ec": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("08d7f3b4-e5e3-47fb-bc57-19ef6b6cb5ec"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "67d436d2-4e73-496d-9aaa-1a34a4a21ee3": (
            properties: {
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "name": (
                    value: String(""),
                ),
                "key": (
                    value: Integer(0),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("67d436d2-4e73-496d-9aaa-1a34a4a21ee3"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "14d80c62-426b-4593-8e00-57942d116f41": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("14d80c62-426b-4593-8e00-57942d116f41"),
                ),
                "owner": (
                    value: UuidOpt(Some("3bc7b8f7-c271-4bda-9cf4-82efb5b2e707")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("add96e38-85b2-410a-8ef4-163f5be6e3c1")),
                ),
            },
            verbs: [],
        ),
        "58961e48-d921-48ba-bd13-07148e5f29bf": (
            properties: {
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "uuid": (
                    value: Uuid("58961e48-d921-48ba-bd13-07148e5f29bf"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "key": (
                    value: Integer(0),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "9de6dec1-b987-42dd-82df-24968e88665c": (
            properties: {
                "uuid": (
                    value: Uuid("9de6dec1-b987-42dd-82df-24968e88665c"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [],
        ),
        "83e10708-c9de-47d4-95a5-ef50d4580ba3": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("83e10708-c9de-47d4-95a5-ef50d4580ba3"),
                ),
            },
            verbs: [],
        ),
        "fb1949ec-460e-4409-af12-6a5e1fffbe65": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("fb1949ec-460e-4409-af12-6a5e1fffbe65"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "38700983-5d37-41a4-b272-56f8dfcd3c53": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("add96e38-85b2-410a-8ef4-163f5be6e3c1")),
                ),
                "uuid": (
                    value: Uuid("38700983-5d37-41a4-b272-56f8dfcd3c53"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "owner": (
                    value: UuidOpt(Some("3bc7b8f7-c271-4bda-9cf4-82efb5b2e707")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "2a6e19be-d902-4e9e-937c-ed252c9fadd2": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "key": (
                    value: Integer(0),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
                "uuid": (
                    value: Uuid("2a6e19be-d902-4e9e-937c-ed252c9fadd2"),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "59f4ba4c-0ff1-407f-97d1-3db6fd282a41": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "uuid": (
                    value: Uuid("59f4ba4c-0ff1-407f-97d1-3db6fd282a41"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "key": (
                    value: Integer(0),
                ),
                "owner": (
                    value: UuidOpt(Some("08d7f3b4-e5e3-47fb-bc57-19ef6b6cb5ec")),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "6e02be8d-7f47-45b9-8efe-8d289e19619f": (
            properties: {
                "uuid": (
                    value: Uuid("6e02be8d-7f47-45b9-8efe-8d289e19619f"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "b0e289dc-3625-477b-97fb-39b07ec9cabf": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("b0e289dc-3625-477b-97fb-39b07ec9cabf"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "6e11b4f1-ccf1-403b-aaa2-c92e27a8c362": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String("S.ambiguous_match"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("6e11b4f1-ccf1-403b-aaa2-c92e27a8c362"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "986e0437-2394-4c34-b8e6-0f0f34abd2ad": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("add96e38-85b2-410a-8ef4-163f5be6e3c1")),
                ),
                "uuid": (
                    value: Uuid("986e0437-2394-4c34-b8e6-0f0f34abd2ad"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "owner": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "d7adc29d-b427-4684-869c-8aef93ede598": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("d7adc29d-b427-4684-869c-8aef93ede598"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "f4ef34ba-b3b1-4a03-92ba-217994a1fb06": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("385b078b-235b-4d69-ad8a-16008672fd10")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(Some("5a45b2a8-54ce-4958-962e-f7b3d4db7885")),
                ),
                "owner": (
                    value: Uuid("f4ef34ba-b3b1-4a03-92ba-217994a1fb06"),
                ),
                "name": (
                    value: String("testplayer"),
                ),
                "uuid": (
                    value: Uuid("f4ef34ba-b3b1-4a03-92ba-217994a1fb06"),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "5879f9aa-5f0d-4c6f-9304-71bef841813c": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("5879f9aa-5f0d-4c6f-9304-71bef841813c"),
                ),
                "owner": (
                    value: UuidOpt(Some("41258865-243a-49b7-9009-7038b862808c")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "description": (
                    value: String("A nondescript room"),
                ),
                "name": (
                    value: String("Prototype:Room"),
                ),
                "parent": (
                    value: UuidOpt(Some("add96e38-85b2-410a-8ef4-163f5be6e3c1")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "announce",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        for i, target in ipairs(this.contents:without(player)) do",
                        "            pcall(target.tell, target, unpack(args))",
                        "        end",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "announce_all",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        for i, target in ipairs(this.contents) do",
                        "            pcall(target.tell, target, unpack(args))",
                        "        end",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "say",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        pcall(function()",
                        "            -- TODO player should really be caller here once implemented",
                        "            player:tell(\'You say, \"%s\"\' % {argstr})",
                        "            this:announce(\'$name says, \"$msg\"\' % {name = player.name, msg = argstr})",
                        "        end)",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "emote",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- TODO player should really be caller here once implemented",
                        "        this:announce_all(\'%s %s\' % {player.name, argstr})",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "describe",
                        ],
                    ),
                    args: NoArgs,
                    code: [
                        "        local name = this:title()",
                        "        local description = this.description or \"You see nothing special.\"",
                        "        local msg = \'%s\\n%s\' % {name, description}",
                        "",
                        "        local seen = this.contents:without(player):map(_1.name)",
                        "        if #seen > 0 then",
                        "            msg = msg .. \"\\nYou see here: \" .. table.concat(seen, \", \")",
                        "        end",
                        "",
                        "        return msg",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "look",
                        ],
                    ),
                    args: NoArgs,
                    code: [
                        "        player:notify(this:describe())",
                        "    ",
                    ],
                ),
            ],
        ),
        "26a3c638-5451-44d2-95a4-8473e3d6d369": (
            properties: {
                "parent": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("26a3c638-5451-44d2-95a4-8473e3d6d369"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String("S.nothing"),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "3672a9a9-bec2-4932-b950-423095bf110b": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("3672a9a9-bec2-4932-b950-423095bf110b"),
                ),
            },
            verbs: [],
        ),
        "93799ba0-f4ff-4b2e-9c8c-86391d3cd2ac": (
            properties: {
                "key": (
                    value: Integer(0),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "owner": (
                    value: UuidOpt(Some("2fa9d6a0-fd23-4e15-91a3-ee48b73a36af")),
                ),
                "parent": (
                    value: UuidOpt(Some("26a3c638-5451-44d2-95a4-8473e3d6d369")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("93799ba0-f4ff-4b2e-9c8c-86391d3cd2ac"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "ca290e6c-cb01-430d-b909-cdab0970e704",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
    },
    system_uuid: "ca290e6c-cb01-430d-b909-cdab0970e704",
    players: [
        "3bc7b8f7-c271-4bda-9cf4-82efb5b2e707",
        "f1e85ac7-270f-4897-b67d-db19bc363c55",
        "f4ef34ba-b3b1-4a03-92ba-217994a1fb06",
    ],
)