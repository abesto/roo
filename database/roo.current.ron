(
    objects: {
        "7d7153a5-b119-466a-8e11-f2992a7b5991": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String("S.failed_match"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("7d7153a5-b119-466a-8e11-f2992a7b5991"),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "19e5d942-75ae-43c7-9734-8ac38d926035": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("19e5d942-75ae-43c7-9734-8ac38d926035"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String("S.nothing"),
                ),
            },
            verbs: [],
        ),
        "3a1b1b29-3732-4aca-814b-5a2d1087aed2": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String("root object"),
                ),
                "uuid": (
                    value: Uuid("3a1b1b29-3732-4aca-814b-5a2d1087aed2"),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "match",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "        local c = this.contents",
                        "        return S.string_utils:match(args[1], c, \"name\", c, \"aliases\")",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "get_name",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        return this.name",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "title",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local name = this:get_name()",
                        "        if is_type(name, \"string\") and #name > 0 then",
                        "            return name",
                        "        end",
                        "        return this.uuid",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "tell",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        this:notify(tostr(args))",
                        "    ",
                    ],
                ),
            ],
        ),
        "1d58f55f-e191-4833-9190-9ff453a37dae": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "name": (
                    value: String(""),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "uuid": (
                    value: Uuid("1d58f55f-e191-4833-9190-9ff453a37dae"),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "key": (
                    value: Integer(0),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "5e20500d-036c-4fee-9fe2-40b6f9688f9a": (
            properties: {
                "parent": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "uuid": (
                    value: Uuid("5e20500d-036c-4fee-9fe2-40b6f9688f9a"),
                ),
                "name": (
                    value: String(""),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "words",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        return pl.stringx.split(args[1])",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "from_list",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local list, delimiter = table.unpack(args)",
                        "        return table.concat(list, delimiter)",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "match_object",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "        -- :match_object(string,location[,someone])",
                        "        -- Returns the object matching the given string for someone, on the assumption that s/he is in the given location.  `someone\' defaults to player.",
                        "        -- This first tries :literal_object(string), \\\"me\\\"=>someone,\\\"here\\\"=>location, then player:match(string) and finally location:match(string) if location is valid.",
                        "        -- This is the default algorithm for use by room :match_object() and player :my_match_object() verbs.  Player verbs that are calling this directly should probably be calling :my_match_object instead.",
                        "        local string, here, who = table.unpack(args)",
                        "        if who == nil then",
                        "            who = player",
                        "        end",
                        "        pl.utils.assert_string(1, string)",
                        "        assert_class_of(2, here, ObjectProxy)",
                        "        assert_class_of(3, who, ObjectProxy)",
                        "",
                        "        local object = this:literal_object(string)",
                        "        if S.failed_match ~= object then",
                        "            return object",
                        "        elseif string == \"me\" then",
                        "            return who",
                        "        elseif string == \"here\" then",
                        "            return here",
                        "        end",
                        "",
                        "        local pobject = who:match(string)",
                        "        if valid(pobject) and List{pobject.name}:extend(pobject.aliases):contains(string) or not valid(here) then",
                        "            -- ...exact match in player, or room is bogus...",
                        "            return pobject",
                        "        end",
                        "",
                        "        local hobject = here:match(string)",
                        "        if valid(hobject) and List{hobject.name}:extend(hobject.aliases):contains(string) or pobject == S.failed_match then",
                        "            -- ...exact match in room, or match in player failed completely...",
                        "            return hobject",
                        "        else",
                        "            return pobject",
                        "        end",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "match",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "    -- Each obj-list should be a list of objects or a single object, which is treated as if it were a list of that object.  Each prop-name should be string naming a property on every object in the corresponding obj-list.  The value of that property in each case should be either a string or a list of strings.",
                        "    -- The argument string is matched against all of the strings in the property values.",
                        "    -- If it exactly matches exactly one of them, the object containing that property is returned.  If it exactly matches more than one of them, $ambiguous_match is returned.",
                        "    -- If there are no exact matches, then partial matches are considered, ones in which the given string is a prefix of some property string.  Again, if exactly one match is found, the object with that property is returned, and if there is more than one match, $ambiguous_match is returned.",
                        "    -- Finally, if there are no exact or partial matches, then $failed_match is returned.",
                        "    local subject = args[1]",
                        "    assert_class_of(0, this, ObjectProxy)",
                        "    assert_string(1, subject)",
                        "    ",
                        "    if subject == \"\" then",
                        "        return S.nothing",
                        "    end",
                        "    local no_exact_match = nil",
                        "    local no_partial_match = nil",
                        "    for i = 1, #args / 2 do",
                        "        local prop_name = args[2 * i + 1]",
                        "        local olist = args[2 * i]",
                        "        for j, object in ipairs(is_indexable(olist) and olist or {olist}) do",
                        "            if valid(object) then",
                        "                local str_list = object[prop_name]",
                        "                if is_indexable(str_list) and not List:class_of(str_list) then",
                        "                    str_list = List(str_list)",
                        "                elseif not str_list then",
                        "                    str_list = List()",
                        "                end",
                        "                -- TODO handle E_PERM, E_PROPNF => {}",
                        "                if not is_indexable(str_list) then",
                        "                    str_list = List{str_list}",
                        "                end",
                        "                if str_list:contains(subject) then",
                        "                    if no_exact_match == nil then",
                        "                        no_exact_match = object",
                        "                    elseif no_exact_match ~= object then",
                        "                        return S.ambiguous_match",
                        "                    end",
                        "                else",
                        "                    for i, string in ipairs(str_list) do",
                        "                        if string.find(string, subject, 1, true) ~= 1 then",
                        "                        elseif no_partial_match == nil then",
                        "                            no_partial_match = object",
                        "                        elseif no_partial_match ~= object then",
                        "                            no_partial_match = S.ambiguous_match",
                        "                        end",
                        "                    end",
                        "                end",
                        "            end",
                        "        end",
                        "    end",
                        "    return no_exact_match or (no_partial_match or S.failed_match)",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "literal_object",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "    -- Matches args[1] against literal objects: #xxxxx, $variables, *mailing-lists, and username.  Returns the object if successful, $failed_match else.",
                        "    -- TODO this is currently a partial implementation",
                        "    local string = args[1]",
                        "    if #string == 0 then",
                        "      return S.nothing",
                        "    end",
                        "    local object = S.code_utils:toobj(string)",
                        "    if object ~= nil and not is_error(object) then",
                        "      return object;",
                        "    end",
                        "    return S.failed_match;",
                        "    -- elseif (string[1] == \"~\")",
                        "    --   return this:match_player(string[2..$], #0);",
                        "    -- elseif (string[1] == \"*\" && length(string) > 1)",
                        "    --   return $mail_agent:match_recipient(string);",
                        "    -- elseif (string[1] == \"$\")",
                        "    --   string[1..1] = \"\";",
                        "    --   object = #0;",
                        "    --   while (pn = string[1..(dot = index(string, \".\")) ? dot - 1 | $])",
                        "    --     if (!$object_utils:has_property(object, pn) || typeof(object = object.(pn)) != OBJ)",
                        "    --       return $failed_match;",
                        "    --     endif",
                        "    --     string = string[length(pn) + 2..$];",
                        "    --   endwhile",
                        "    --   if (object == #0 || typeof(object) == ERR)",
                        "    --     return $failed_match;",
                        "    --   else",
                        "    --     return object;",
                        "    --   endif",
                        "    -- else",
                        "    --   return $failed_match;",
                        "    -- endif",
                        "    ",
                    ],
                ),
            ],
        ),
        "0ebaf1e1-1a4a-40d1-a310-5d6d26fa5bf9": (
            properties: {
                "name": (
                    value: String("Prototype:Room"),
                ),
                "parent": (
                    value: UuidOpt(Some("3a1b1b29-3732-4aca-814b-5a2d1087aed2")),
                ),
                "description": (
                    value: String("A nondescript room"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "uuid": (
                    value: Uuid("0ebaf1e1-1a4a-40d1-a310-5d6d26fa5bf9"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "announce",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        for i, target in ipairs(this.contents:without(player)) do",
                        "            pcall(target.tell, target, unpack(args))",
                        "        end",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "announce_all",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        for i, target in ipairs(this.contents) do",
                        "            pcall(target.tell, target, unpack(args))",
                        "        end",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "say",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        pcall(function()",
                        "            -- TODO player should really be caller here once implemented",
                        "            player:tell(\'You say, \"%s\"\' % {argstr})",
                        "            this:announce(\'$name says, \"$msg\"\' % {name = player.name, msg = argstr})",
                        "        end)",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "emote",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- TODO player should really be caller here once implemented",
                        "        this:announce_all(\'%s %s\' % {player.name, argstr})",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "describe",
                        ],
                    ),
                    args: NoArgs,
                    code: [
                        "        local name = this:title()",
                        "        local description = this.description or \"You see nothing special.\"",
                        "        local msg = \'%s\\n%s\' % {name, description}",
                        "",
                        "        local seen = this.contents:without(player):map(_1.name)",
                        "        if #seen > 0 then",
                        "            msg = msg .. \"\\nYou see here: \" .. table.concat(seen, \", \")",
                        "        end",
                        "",
                        "        return msg",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "look",
                        ],
                    ),
                    args: NoArgs,
                    code: [
                        "        player:notify(this:describe())",
                        "    ",
                    ],
                ),
            ],
        ),
        "7297ed0a-b790-44ba-86da-64ccfdfc148d": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "name": (
                    value: String(""),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("7297ed0a-b790-44ba-86da-64ccfdfc148d"),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "get_room",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local object = args[1]",
                        "        return object.location",
                        "    ",
                    ],
                ),
            ],
        ),
        "3927ce9b-c782-4b75-80a2-eed3886630d3": (
            properties: {
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "uuid": (
                    value: Uuid("3927ce9b-c782-4b75-80a2-eed3886630d3"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String(""),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "short_prep",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        return args[1]",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "full_prep",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        return nil",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "toobj",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- TODO this may need some extra logic",
                        "        return toobj(args[1]):unwrap_unsafe()",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "parse_verbref",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "        -- S.code_utils:parse_verbref(string)",
                        "        -- Parses string as a MOO-code verb reference, returning {object, verb-name-string} for a successful parse and false otherwise.  It always returns the right object-string to pass to, for example, this-room:match_object().",
                        "        local s = args[1]",
                        "        local colon = string.find(s, \":\", 1, true)",
                        "        if colon then",
                        "            local object = string.sub(s, 1, colon - 1)",
                        "            local verbname = string.sub(s, colon + 1)",
                        "            if not (object and verbname) then",
                        "                return 0",
                        "            end",
                        "            if string.sub(object, 0, 2) == \"S.\" then",
                        "                local pname = string.sub(object, 3)",
                        "                local p = S[pname]",
                        "                if not is_type(p, ObjectProxy) then",
                        "                    return 0",
                        "                end",
                        "                object = p.uuid",
                        "            end",
                        "            if object == \"S\" then",
                        "                object = S.uuid",
                        "            end",
                        "            return {object, verbname}",
                        "        else",
                        "            return 0",
                        "        end",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "parse_argspec",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "-- :parse_arg_spec(@args)",
                        "--  attempts to parse the given sequence of args into a verb_arg specification",
                        "--  returns {verb_args,remaining_args} if successful.",
                        "--  e.g., :parse_arg_spec(\\\"this\\\",\\\"in\\\",\\\"front\\\",\\\"of\\\",\\\"any\\\",\\\"foo\\\"..)",
                        "--           => {{\\\"this\\\",\\\"in front of\\\",\\\"any\\\"},{\\\"foo\\\"..}}",
                        "--  returns a string error message if parsing fails.",
                        "local nargs = #args",
                        "local args = List(args)",
                        "if nargs < 1 then",
                        "  return {{}, {}}",
                        "end",
                        "",
                        "local ds = args[1]",
                        "if args[1] == \"tnt\" then",
                        "  return {{\"this\", \"none\", \"this\"}, args:slice(2)}",
                        "elseif not List{\"this\", \"any\", \"none\"}:contains(ds) then",
                        "  return \'\"%s\" is not a valid direct object specifier.\' % {ds}",
                        "elseif nargs < 2 or List{\"none\", \"any\"}:contains(args[2]) then",
                        "  local verbargs = args:slice(1, min(3, nargs))",
                        "  local rest = args:slice(4, nargs);",
                        "end",
                        "",
                        "local gp = List(S.code_utils:get_prep(unpack(args:slice(2, nargs))))",
                        "if not gp[1] then",
                        "  return \'\"%s\" is not a valid preposition.\' % {args[2]}",
                        "else",
                        "  local nargs = #gp",
                        "  local verbargs = List{ds}:extend(gp:slice(1, min(2, nargs)))",
                        "  rest = gp:slice(3, nargs)",
                        "end",
                        "",
                        "if #verbargs >= 3 and not List{\"this\", \"any\", \"none\"}:contains(verbargs[3]) then",
                        "  return \'\"%s\" is not a valid indirect object specifier.\' % {verbargs[3]}",
                        "end",
                        "return {verbargs, rest};",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "find_verb_named",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- :find_verb_named(object,name[,n])",
                        "        --  returns the *number* of the first verb on object matching the given name.",
                        "        --  optional argument n, if given, starts the search with verb n,",
                        "        --  causing the first n verbs (1..n-1) to be ignored.",
                        "        --  nil is returned if no verb is found.",
                        "        --  This routine does not find inherited verbs.",
                        "        local object, name, start = unpack(args)",
                        "        assert_object(1, object)",
                        "        assert_string(2, name)",
                        "",
                        "        if start == nil then",
                        "            start = 1",
                        "        end",
                        "        assert_arg(3, start, \"number\")",
                        "",
                        "        return verbs(object):map(function (object_verbs)",
                        "            for i = start, #object_verbs do",
                        "                local verbinfo = verb_info(object, i):unwrap()",
                        "                if this:verbname_match(verbinfo[3], name) then",
                        "                    return i",
                        "                end",
                        "            end",
                        "        end):unwrap_or(nil)",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "verbname_match",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local candidates, name = table.unpack(args)",
                        "        assert_arg(1, candidates, \'table\', nil, is_indexable)",
                        "        assert_string(2, name)",
                        "        return List(candidates):contains(name)",
                        "    ",
                    ],
                ),
            ],
        ),
        "3718fa74-b82b-4e94-81d9-37fa2c7bc598": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "uuid": (
                    value: Uuid("3718fa74-b82b-4e94-81d9-37fa2c7bc598"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "has_verb",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        local object, verb = table.unpack(args)",
                        "        return db:has_verb_with_name(object.uuid, verb)",
                        "    ",
                    ],
                ),
            ],
        ),
        "100d518d-1811-44d9-bd80-dc52baa1f6aa": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "minimal_core_loaded": (
                    value: Boolean(true),
                ),
                "command_utils": (
                    value: Uuid("c2cd1c57-1670-4a1f-bd71-a6bc22d7bbec"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("100d518d-1811-44d9-bd80-dc52baa1f6aa"),
                ),
                "code_utils": (
                    value: Uuid("3927ce9b-c782-4b75-80a2-eed3886630d3"),
                ),
                "verb_editor": (
                    value: Uuid("7297ed0a-b790-44ba-86da-64ccfdfc148d"),
                ),
                "Player": (
                    value: Uuid("6e39be8c-cc4d-4e4d-8355-56382c10895c"),
                ),
                "Root": (
                    value: Uuid("3a1b1b29-3732-4aca-814b-5a2d1087aed2"),
                ),
                "Room": (
                    value: Uuid("0ebaf1e1-1a4a-40d1-a310-5d6d26fa5bf9"),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "starting_room": (
                    value: Uuid("faa20953-86f6-46a7-87f6-1a17a13e3aee"),
                ),
                "webclient": (
                    value: Uuid("b50bb2b1-60e7-4450-998b-ab3c15b95365"),
                ),
                "parent": (
                    value: UuidOpt(None),
                ),
                "string_utils": (
                    value: Uuid("5e20500d-036c-4fee-9fe2-40b6f9688f9a"),
                ),
                "name": (
                    value: String(""),
                ),
                "nothing": (
                    value: Uuid("19e5d942-75ae-43c7-9734-8ac38d926035"),
                ),
                "ambiguous_match": (
                    value: Uuid("57704087-db5b-476d-aec6-faafa3cacfe0"),
                ),
                "failed_match": (
                    value: Uuid("7d7153a5-b119-466a-8e11-f2992a7b5991"),
                ),
                "object_utils": (
                    value: Uuid("3718fa74-b82b-4e94-81d9-37fa2c7bc598"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: false,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "do_login_command",
                        ],
                    ),
                    args: NoArgs,
                    code: [
                        "        player = create(S.Player):unwrap()",
                        "        player.owner = player",
                        "        player:move(S.starting_room)",
                        "        player.name = \"guest\"",
                        "        player:set_player_flag(true)",
                        "",
                        "        return player.uuid",
                        "        ",
                    ],
                ),
            ],
        ),
        "6e39be8c-cc4d-4e4d-8355-56382c10895c": (
            properties: {
                "children": (
                    value: Uuids([]),
                ),
                "uuid": (
                    value: Uuid("6e39be8c-cc4d-4e4d-8355-56382c10895c"),
                ),
                "name": (
                    value: String("generic player"),
                ),
                "parent": (
                    value: UuidOpt(Some("3a1b1b29-3732-4aca-814b-5a2d1087aed2")),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "my_match_object",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- :my_match_object(string [,location])",
                        "        return S.string_utils:match_object(unpack(",
                        "            pl.List(args):append(this.location):slice(1, 2):append(this)",
                        "        ))",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "@edit",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "-- Calls the verb editor on verbs, the note editor on properties, and on anything else assumes it\'s an object for which you want to edit the .description.",
                        "",
                        "-- Placeholder until the rest of the machinery is in place",
                        "    S.webclient:invoke(argstr, verb)",
                        "-- EOF placeholder",
                        "",
                        "--local len = player.linelen",
                        "--if not args then",
                        "--  (player in $note_editor.active ? $note_editor | $verb_editor):invoke(dobjstr, verb);",
                        "--elseif ($code_utils:parse_verbref(args[1]))",
                        "--  if (player.programmer)",
                        "--    #480:invoke(argstr, verb);",
                        "--    player:tell(\"invoke done\");",
                        "--  else",
                        "--    player:notify(\"You need to be a programmer to do this.\");",
                        "--    player:notify(\"If you want to become a programmer, talk to a wizard.\");",
                        "--    return;",
                        "--  endif",
                        "--elseif ($list_editor:is_valid(dobjstr))",
                        "--  $list_editor:invoke(dobjstr, verb);",
                        "--else",
                        "--  $note_editor:invoke(dobjstr, verb);",
                        "--endif",
                        "--if len then",
                        "--    player.linelen = len",
                        "--end",
                        "--\"player.linelen = len;\"",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "edit_option",
                        ],
                    ),
                    args: NoArgs,
                    code: [],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "@program",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local vref = List(args)",
                        "",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {\"@program object:verb argspec\"})",
                        "  return",
                        "end",
                        "",
                        "local argspec = vref:slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "",
                        "  player:tell(\"Now programming %s:%d\" % {object.uuid, vnum})",
                        "",
                        "  local done = false",
                        "  local lines = List()",
                        "  while not done do",
                        "      local line = read()",
                        "      if line == \'.\' then",
                        "          done = true",
                        "      else",
                        "          lines:append(line)",
                        "      end",
                        "  end",
                        "",
                        "  local result = set_verb_code(object, vnum, lines)",
                        "  if result:is_ok() then",
                        "    player:tell(\"Program saved.\")",
                        "  else",
                        "    player:tell(toliteral(result:err()))",
                        "  end",
                        "end",
                        "    ",
                    ],
                ),
            ],
        ),
        "c2cd1c57-1670-4a1f-bd71-a6bc22d7bbec": (
            properties: {
                "location": (
                    value: UuidOpt(None),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "uuid": (
                    value: Uuid("c2cd1c57-1670-4a1f-bd71-a6bc22d7bbec"),
                ),
                "name": (
                    value: String(""),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "object_match_failed",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- Usage: object_match_failed(object, string)",
                        "        -- Prints a message if string does not match object.  Generally used after object is derived from a :match_object(string).",
                        "        local match_result, string = table.unpack(args)",
                        "        assert_class_of(1, match_result, ObjectProxy)",
                        "        assert_string(2, string)",
                        "",
                        "        -- TODO: tell = $perm_utils:controls(caller_perms(), player) ? \"notify\" | \"tell\";",
                        "        local tell = bind1(player.tell, player)",
                        "        if is_uuid(string) and S.code_utils:toobj(string) ~= E_TYPE then",
                        "          -- ...avoid the `I don\'t know which `#-2\' you mean\' message...",
                        "          if not valid(match_result) then",
                        "            tell(\"%s does not exist.\" % {string})",
                        "          end",
                        "          return not valid(match_result)",
                        "        elseif match_result == S.nothing then",
                        "          tell(\"You must give the name of some object.\")",
                        "        elseif match_result == S.failed_match then",
                        "          tell(\'I see no \"%s\" here.\' % {string})",
                        "        elseif match_result == S.ambiguous_match then",
                        "          tell(\'I don\\\'t know which \"%s\" you mean.\' % {string})",
                        "        elseif not valid(match_result) then",
                        "          tell(\"%s does not exist.\" % {match_result})",
                        "        else",
                        "          return false",
                        "        end",
                        "        return true",
                        "    ",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: false,
                        ),
                        names: [
                            "dump_lines",
                        ],
                    ),
                    args: Direct(
                        dobj: Any,
                    ),
                    code: [
                        "        -- :dump_lines(text) => text `.\'-quoted for :read_lines()",
                        "        --  text is assumed to be a list of strings",
                        "        --  Returns a corresponding list of strings which, when read via :read_lines, ",
                        "        --  produces the original list of strings (essentially, any strings beginning ",
                        "        --  with a period \".\" have the period doubled).",
                        "        --  The list returned includes a final \".\"",
                        "        -- TODO original implementation has some magic I don\'t understand, review that",
                        "        local text = args[1]",
                        "        return pl.List(text):map(function (line)",
                        "            if string.sub(line, 1, 1) == \".\" then",
                        "                return \".\" .. line",
                        "            else",
                        "                return line",
                        "            end",
                        "        end):append(\".\")",
                        "    ",
                    ],
                ),
            ],
        ),
        "faa20953-86f6-46a7-87f6-1a17a13e3aee": (
            properties: {
                "contents": (
                    value: Uuids([
                        "69c32234-c0ae-4186-a503-e0276c479498",
                    ]),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "name": (
                    value: String("The Void"),
                ),
                "description": (
                    value: String("There is nothing, and you are in it."),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(Some("0ebaf1e1-1a4a-40d1-a310-5d6d26fa5bf9")),
                ),
                "uuid": (
                    value: Uuid("faa20953-86f6-46a7-87f6-1a17a13e3aee"),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "wiggle",
                        ],
                    ),
                    args: NoArgs,
                    code: [
                        "        this:announce_all(\"%s wiggles\" % {this.name})",
                        "    ",
                    ],
                ),
            ],
        ),
        "69c32234-c0ae-4186-a503-e0276c479498": (
            properties: {
                "name": (
                    value: String("guest"),
                ),
                "owner": (
                    value: Uuid("69c32234-c0ae-4186-a503-e0276c479498"),
                ),
                "location": (
                    value: UuidOpt(Some("faa20953-86f6-46a7-87f6-1a17a13e3aee")),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "parent": (
                    value: UuidOpt(Some("6e39be8c-cc4d-4e4d-8355-56382c10895c")),
                ),
                "uuid": (
                    value: Uuid("69c32234-c0ae-4186-a503-e0276c479498"),
                ),
                "children": (
                    value: Uuids([]),
                ),
            },
            verbs: [],
        ),
        "b50bb2b1-60e7-4450-998b-ab3c15b95365": (
            properties: {
                "name": (
                    value: String(""),
                ),
                "key": (
                    value: Integer(0),
                ),
                "aliases": (
                    value: List([
                        String("Webclient Package"),
                    ]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "parent": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "uuid": (
                    value: Uuid("b50bb2b1-60e7-4450-998b-ab3c15b95365"),
                ),
                "owner": (
                    value: UuidOpt(Some("19e5d942-75ae-43c7-9734-8ac38d926035")),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "description": (
                    value: String("This is a placeholder parent for all the $..._utils packages, to more easily find them and manipulate them. At present this object defines no useful verbs or properties. (Filfre.)"),
                ),
                "object_size": (
                    value: List([
                        Integer(0),
                        Integer(0),
                    ]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
            },
            verbs: [
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_editing_info",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local object, vname, code = table.unpack(args)",
                        "local vargs",
                        "if is_type(vname, \"table\") then",
                        "  vargs = \" %s %s %s\" % {vname[2], S.code_utils:short_prep(vname[3]), vname[4]}",
                        "  vname = vname[1]",
                        "else",
                        "  vargs = \"\"",
                        "end",
                        "local name = \"%s:%s\" % {object.name, vname};",
                        "-- TODO swap to full @program invocation once we have proper dobj, prep, iobj support",
                        "-- local upload = \"@program %s:%s %s\" % {object.uuid, vname, vargs}",
                        "local upload = \"@program %s:%s\" % {object.uuid, vname}",
                        "return {name, code, upload};",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke(...)",
                        "-- to find out what arguments this verb expects,",
                        "-- see this editor\'s parse_invoke verb.",
                        "local new = args[1]",
                        "local spec = this:parse_invoke(unpack(args))",
                        "if type(spec) == \"table\" and not is_error(spec) then",
                        "  local info = this:local_editing_info(unpack(spec))",
                        "  -- TODO impl has_verb, then uncomment",
                        "  --if S.object_utils:has_verb(this, \"local_editing_info\") and info then",
                        "    player:tell(\"Invoking local editor\")",
                        "    this:invoke_local_editor(unpack(info))",
                        "  --else",
                        "    --player:tell(\"This is for editing in a web client, if you don\'t wanna do that, use a different verb.\");",
                        "  --end",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "parse_invoke",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :parse_invoke(string, v)",
                        "-- string is the commandline string to parse to obtain the obj:verb to edit",
                        "--  v is the actual command verb used to invoke the editor",
                        "-- => {object, verbname, verb_code} or error",
                        "",
                        "local vref = S.string_utils:words(args[1])",
                        "local spec = S.code_utils:parse_verbref(vref[1])",
                        "if not vref or spec == 0 then",
                        "  player:tell(\"Usage: %s %s\" % {args[2], \" object:verb\"})",
                        "  return",
                        "end",
                        "local argspec = List(vref):slice(2)",
                        "if #argspec > 0 then",
                        "  local pas = S.code_utils:parse_argspec(unpack(argspec))",
                        "  if type(pas) == \"table\" then",
                        "    if pas[2] and #pas[2] > 0 then",
                        "      player:tell(\'I don\\\'t understand \"%s\"\' % {S.string_utils:from_list(pas[2], \" \")})",
                        "      return",
                        "    end",
                        "    argspec = pl.List(pas[1]):extend{\"none\", \"none\"}:slice(1, 3)",
                        "    argspec[2] = S.code_utils:full_prep(argspec[2]) or argspec[2]",
                        "  else",
                        "    player:tell(toliteral(pas))",
                        "    return",
                        "  end",
                        "end",
                        "player:tell(toliteral(spec))",
                        "local object = player:my_match_object(spec[1], S.verb_editor:get_room(player))",
                        "if not S.command_utils:object_match_failed(object, spec[1]) then",
                        "  local vname = spec[2]",
                        "  local vnum = S.code_utils:find_verb_named(object, vname)",
                        "  if #argspec > 0 then",
                        "    -- TODO may need deep table comparison here",
                        "    while vnum and (object:verb_args(vnum) ~= argspec) do",
                        "      vnum = S.code_utils:find_verb_named(object, vname, vnum + 1)",
                        "    end",
                        "  end",
                        "  local code",
                        "  if vnum ~= nil then",
                        "    code = this:fetch_verb_code(object, vnum)",
                        "  else",
                        "    code = E_VERBNF",
                        "  end",
                        "  if is_error(code) then",
                        "    player:tell((code ~= E_VERBNF) and code or \"That object does not define that verb\", argspec and \" with those args.\" or \".\")",
                        "    return code",
                        "  else",
                        "    return {object, argspec and {vname, table.unpack(argspec)} or vname, code}",
                        "  end",
                        "end",
                        "return 0",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "fetch_verb_code",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "set_task_perms(player)",
                        "return verb_code(args[1], args[2], not player:edit_option(\"no_parens\")):unwrap_or(\"\")",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "invoke_local_editor",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "-- :invoke_local_editor(name, text, upload)",
                        "-- Spits out the magic text that invokes the local editor in the player\'s client.\"",
                        "-- NAME is a good human-readable name for the local editor to use for this particular piece of text.\"",
                        "-- TEXT is a string or list of strings, the initial body of the text being edited.\"",
                        "-- UPLOAD, a string, is a MOO command that the local editor can use to save the text when the user is done editing.  The local editor is going to send that command on a line by itself, followed by the new text lines, followed by a line containing only `.\'.  The UPLOAD command should therefore call $command_utils:read_lines() to get the new text as a list of strings.\"",
                        "",
                        "-- TODO re-enable caller checking once caller is implemented",
                        "--if caller ~= this then",
                        "--   return",
                        "--end",
                        "",
                        "local name, text, upload = table.unpack(args)",
                        "assert_string(1, name)",
                        "if is_type(text, \"string\") then",
                        "  text = {text}",
                        "end",
                        "this:local_instruction(name, upload)",
                        "-- :dump_lines() takes care of the final `.\' ...",
                        "for i, line in ipairs(S.command_utils:dump_lines(text)) do",
                        "  notify(player, line)",
                        "end",
                        "",
                    ],
                ),
                (
                    info: (
                        owner: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
                        perms: (
                            r: true,
                            w: false,
                            x: true,
                        ),
                        names: [
                            "local_instruction",
                        ],
                    ),
                    args: Direct(
                        dobj: This,
                    ),
                    code: [
                        "local label, upload = table.unpack(args)",
                        "if not upload then",
                        "    upload = \"none\"",
                        "end",
                        "local msg = \"#$# edit name: %s upload: %s\" % {label, upload}",
                        "player:tell(msg)",
                        "",
                    ],
                ),
            ],
        ),
        "57704087-db5b-476d-aec6-faafa3cacfe0": (
            properties: {
                "parent": (
                    value: UuidOpt(None),
                ),
                "name": (
                    value: String("S.ambiguous_match"),
                ),
                "children": (
                    value: Uuids([]),
                ),
                "contents": (
                    value: Uuids([]),
                ),
                "location": (
                    value: UuidOpt(None),
                ),
                "uuid": (
                    value: Uuid("57704087-db5b-476d-aec6-faafa3cacfe0"),
                ),
            },
            verbs: [],
        ),
    },
    system_uuid: "100d518d-1811-44d9-bd80-dc52baa1f6aa",
    players: [
        "69c32234-c0ae-4186-a503-e0276c479498",
    ],
)